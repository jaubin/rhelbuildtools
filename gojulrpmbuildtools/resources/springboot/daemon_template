#!/bin/bash
#
# @@JARNAME@@        Manage the @@JARNAME@@ service
#       
# chkconfig:   2345 90 10
# description: @@JARNAME@@ service
# processname: @@JARNAME@@
# config: /etc/gojuldaemons/@@JARNAME@@/application.properties
# pidfile: /var/run/gojuldaemons/@@JARNAME@@/@@JARNAME@@.pid

### BEGIN INIT INFO
# Provides:       @@JARNAME@@
# Required-Start: $local_fs $network
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: Manage the @@JARNAME@@ service
# Description: @@JARNAME@@ service
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

JAVA_CMD="/usr/lib/jvm/java-1.8.0/bin/java"
JAR_FILE="/usr/share/gojuldaemons/@@JARNAME@@/@@JARNAME@@-spring-boot.jar"

prog="$JAVACMD"

user="gojultomcat"
pidfile="/var/run/gojuldaemons/@@JARNAME@@/@@JARNAME@@.pid"
logfile="/var/log/gojuldaemons/@@JARNAME@@/@@JARNAME@@-console-output.log"
conffile="/etc/gojuldaemons/@@JARNAME@@/application.properties"

[ -d $(dirname "$pidfile") ] || mkdir -p $(dirname "$pidfile")

export GOMAXPROCS=${GOMAXPROCS:-2}

if [ -f /etc/sysconfig/gojuldaemons/@@JARNAME@@ ]
then
    . /etc/sysconfig/gojuldaemons/@@JARNAME@@
fi

start() {
    [ -x $prog ] || exit 5
    
    [ -f $conffile ] || exit 6

    umask 077

    touch $logfile $pidfile
    chown $user:$user $logfile $pidfile

    echo -n $"Starting @@JARNAME@@: "
    
    ## holy shell shenanigans, batman!
    ## daemon can't be backgrounded.  we need the pid of the spawned process,
    ## which is actually done via runuser thanks to --user.  you can't do "cmd
    ## &; action" but you can do "{cmd &}; action".
    daemon \
        --pidfile=$pidfile \
        --user=$user \
        " { $JAVA_CMD $JAVA_OPTS -jar $JAR_FILE --spring.config.location=$conffile $PROGRAM_OPTS > $logfile 2>&1 & } ; echo \$! >| $pidfile "
    
    RETVAL=$?
    echo
    
    return $RETVAL
}

stop() {
    echo -n $"Shutting down @@JARNAME@@: "
    ## graceful shutdown with consul leave (better than SIGINT as it waits)
    killproc -p $pidfile
    RETVAL=$?
    echo
    #still wait a second until shutdown is really complete
    sleep 1
    return $RETVAL
}

restart() {
    stop
    start
}

rh_status() {
    status -p "$pidfile" @@JARNAME@@
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        restart
        ;;
    status)
        rh_status
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart}"
        exit 2
esac

exit $?
